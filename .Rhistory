info <- paste('BOS', 'David Price')
retrosheet.id <- pitcher.info[info,1]
retrosheet.id
runApp()
View(y)
View(team.info)
0.75
teams['Red Sox', 9]
0.75 * -1.02939
0.75 * abs(1 - 1.02939)
0.75 * 1.02939)
0.75 * 1.02939
0.7720425 - 0. 75
0.7720425 - 0.75
0.75 - 0.0220425
teams['Brewers', 9]
teams['Tigers', 9]
0.75 * 0.9965688
0.75 * 1.02939
teams['Rockies', 9]
standings('Rockies', 'Yankees', teams, records, 0.534, '1 0')
standings <- function(home.team, visiting.team, teams, records, wpstate, half.inning){
hleague <- teams[home.team, 3]
# get league of away team
aleague <- teams[visiting.team, 3]
# get abbreviation of home team
home.team <- teams[home.team,8]
# get abbreviation of away team
visiting.team <- teams[visiting.team,8]
# if an interleague game, use a different set of calculations
if(hleague != aleague){
# get records for both teams (interleague record)
hrecord <- subset(records, records$Team == home.team & records$Opponent == as.character(aleague))
arecord <- subset(records, records$Team == visiting.team & records$Opponent == as.character(hleague))
# if home team or away team hasn't played any games against a team from the other league, use their total record to calculate winning percentage
if(hrecord$Wins + hrecord$Losses == 0){
hrecord <- subset(records, records$Team == home.team)
hpercentage <- sum(hrecord$Wins)/(sum(hrecord$Losses)+sum(hrecord$Wins))
}
if(arecord$Wins + arecord$Losses == 0){
arecord <- subset(records, records$Team == home.team)
apercentage <- sum(arecord$Wins)/(sum(arecords$Losses)+sum(arecords$Wins))
}else{
# otherwise just calculate winning percentage from interleague games
hpercentage <- as.numeric(hrecord$Wins)/(as.numeric(hrecord$Losses)+as.numeric(hrecord$Wins))
apercentage <- as.numeric(arecord$Wins)/(as.numeric(arecord$Losses)+as.numeric(arecord$Wins))
}
# calculate win probability for home team against the visiting team
P.ab <- (hpercentage-apercentage)+0.5
}else if(home.team == visiting.team){
# if home screen is set (for example Angels v. Angels), return generic win probability
P.ab <- 0.5
}else{
# if game is between teams in the same league, get record of both teams, and calculate total number of games each team has played
record.a <- subset(records, records$Team == as.character(home.team))
games.a <- as.numeric(sum(record.a$Wins) + sum(record.a$Losses))
record.b <- subset(records, records$Team == as.character(visiting.team))
games.b <- as.numeric(sum(record.b$Wins) + sum(record.b$Losses))
# if no games have been played by one team, return generic win probability
if(games.a == 0){
P.ab <- 0.5
}else if(games.b == 0){
P.ab <- 0.5
# otherwise find win probabilities for each team and use log5 equation for probability between two teams
}else{
P.a <- as.numeric(sum(record.a$Wins)/games.a)
P.b <-as.numeric(sum(record.b$Wins)/games.b)
P.ab <- (P.a - (P.a * P.b))/(P.a + P.b - (2*(P.a*P.b)))
}
}
# find the amount above or below the basic 50/50 chances
x <- P.ab - 0.50
# value the team standings propotionally less as the game continues, and multiply by updated state to get the win probability with the team standings
wp.with.team.standing <- as.numeric(wpstate)*(1+x/as.numeric(substr(half.inning,1,1)))
# check that high probability cases do not exceed 1 and low probability cases do not fall below 0
if(wpstate > 0.90){
wp.with.team.standing <- min(wp.with.team.standing, 0.9999)
}else if(wpstate < 0.1){
wp.with.team.standing <- max(wp.with.team.standing, 0.01)
}
bpf <- as.numeric(team.info[home.team, 9])
if(bpf > 1){
pf <- wp.with.team.standing * bpf
dif <- x - wp.with.team.standing
wp.team.park <- wp.with.team.standing - y
}else{
wp.team.park <- wp.with.team.standing * bpf
}
return(round(wp.team.park,3))
}
standings('Rockies', 'Yankees', teams, records, 0.534, '1 0')
standings <- function(home.team, visiting.team, teams, records, wpstate, half.inning){
hleague <- teams[home.team, 3]
# get league of away team
aleague <- teams[visiting.team, 3]
# get abbreviation of home team
home.team <- teams[home.team,8]
# get abbreviation of away team
visiting.team <- teams[visiting.team,8]
# if an interleague game, use a different set of calculations
if(hleague != aleague){
# get records for both teams (interleague record)
hrecord <- subset(records, records$Team == home.team & records$Opponent == as.character(aleague))
arecord <- subset(records, records$Team == visiting.team & records$Opponent == as.character(hleague))
# if home team or away team hasn't played any games against a team from the other league, use their total record to calculate winning percentage
if(hrecord$Wins + hrecord$Losses == 0){
hrecord <- subset(records, records$Team == home.team)
hpercentage <- sum(hrecord$Wins)/(sum(hrecord$Losses)+sum(hrecord$Wins))
}
if(arecord$Wins + arecord$Losses == 0){
arecord <- subset(records, records$Team == home.team)
apercentage <- sum(arecord$Wins)/(sum(arecords$Losses)+sum(arecords$Wins))
}else{
# otherwise just calculate winning percentage from interleague games
hpercentage <- as.numeric(hrecord$Wins)/(as.numeric(hrecord$Losses)+as.numeric(hrecord$Wins))
apercentage <- as.numeric(arecord$Wins)/(as.numeric(arecord$Losses)+as.numeric(arecord$Wins))
}
# calculate win probability for home team against the visiting team
P.ab <- (hpercentage-apercentage)+0.5
}else if(home.team == visiting.team){
# if home screen is set (for example Angels v. Angels), return generic win probability
P.ab <- 0.5
}else{
# if game is between teams in the same league, get record of both teams, and calculate total number of games each team has played
record.a <- subset(records, records$Team == as.character(home.team))
games.a <- as.numeric(sum(record.a$Wins) + sum(record.a$Losses))
record.b <- subset(records, records$Team == as.character(visiting.team))
games.b <- as.numeric(sum(record.b$Wins) + sum(record.b$Losses))
# if no games have been played by one team, return generic win probability
if(games.a == 0){
P.ab <- 0.5
}else if(games.b == 0){
P.ab <- 0.5
# otherwise find win probabilities for each team and use log5 equation for probability between two teams
}else{
P.a <- as.numeric(sum(record.a$Wins)/games.a)
P.b <-as.numeric(sum(record.b$Wins)/games.b)
P.ab <- (P.a - (P.a * P.b))/(P.a + P.b - (2*(P.a*P.b)))
}
}
# find the amount above or below the basic 50/50 chances
x <- P.ab - 0.50
# value the team standings propotionally less as the game continues, and multiply by updated state to get the win probability with the team standings
wp.with.team.standing <- as.numeric(wpstate)*(1+x/as.numeric(substr(half.inning,1,1)))
# check that high probability cases do not exceed 1 and low probability cases do not fall below 0
if(wpstate > 0.90){
wp.with.team.standing <- min(wp.with.team.standing, 0.9999)
}else if(wpstate < 0.1){
wp.with.team.standing <- max(wp.with.team.standing, 0.01)
}
bpf <- as.numeric(team.info[home.team, 9])
if(bpf > 1){
pf <- wp.with.team.standing * bpf
dif <- pf - wp.with.team.standing
wp.team.park <- wp.with.team.standing - dif
}else{
wp.team.park <- wp.with.team.standing * bpf
}
return(round(wp.team.park,3))
}
standings('Rockies', 'Yankees', teams, records, 0.534, '1 0')
runApp()
currentGameLog <- read.csv("GL2015.csv", header = FALSE)
headers <- read.csv("fields2.csv")
names(currentGameLog) <- headers$Header
setwd('~/Desktop/Win-Prob')
currentGameLog <- read.csv("GL2015.csv", header = FALSE)
headers <- read.csv("fields2.csv")
names(currentGameLog) <- headers$Header
View(currentGameLog)
total.runs <- sum(currentGameLog$VISITING_SCORE) + sum(currentGameLog$HOME_SCORE)
per.game <- total.runs/nrow(currentGameLog)
per.team <- per.game/2
Run.Env <- read.csv("Run.Environments.csv", header = TRUE)
View(Run.Env)
Run.Env <- rbind(Run.Env, c('2016', per.game, per.team))
Run.Env <- rbind(Run.Env, c(per.game, per.team))
Run.Env <- read.csv("Run.Environments.csv", header = TRUE)
Run.Env <- read.csv("Run.Environments.csv", header = TRUE)
View(Run.Env)
Run.Env[,'2016']
Run.Env['2016',]
suppressWarnings(python.load('Run Environment - scrape.py'))
current.environment <- python.call("get_run_environment")
setwd('~/Desktop/run-expectancy')
suppressWarnings(python.load('Run Environment - scrape.py'))
current.environment <- python.call("get_run_environment")
suppressWarnings(python.load('Run Environment - scrape.py'))
current.environment <- python.call("get_run_environment")
current.environment
if(year %in% dimnames(Run.Env)[[1]]){
Run.Env[year,] <- current.environment
}
View(Run.Env)
year <- '2017'
if(year %in% dimnames(Run.Env)[[1]]){
Run.Env[year,] <- current.environment
}else{
Run.Env <- rbind(Run.Env, current.environment)
i <- nrow(Run.Env)
dimnames(Run.Env)[[2]][i] <- year
}
i
dimnames(Run.Env)[[1]][28]
dimnames(Run.Env)[[1]][i] <- year
year <- '2016'
suppressWarnings(python.load('Run Environment - scrape.py'))
current.environment <- python.call("get_run_environment")
Run.Env <- read.csv("Run.Environments.csv", header = TRUE)
if(year %in% dimnames(Run.Env)[[1]]){
Run.Env[year,] <- current.environment
}else{
Run.Env <- rbind(Run.Env, current.environment)
i <- nrow(Run.Env)
dimnames(Run.Env)[[1]][i] <- year
}
suppressWarnings(python.load('Run Environment - scrape.py'))
current.environment <- python.call("get_run_environment")
Run.Env <- read.csv("Run.Environments.csv", header = TRUE)
if(year %in% dimnames(Run.Env)[[1]]){
Run.Env[year,] <- current.environment
}else{
Run.Env <- rbind(Run.Env, current.environment)
i <- nrow(Run.Env)
dimnames(Run.Env)[[1]][i] <- year
}
write.csv(Run.Env, 'Run.Environments.csv')
sum(Run.Env[,1])/nrow(Run.Env)
Run.Env['2016',1]
devtools::install_github("stattleship/stattleship-r")
source("zzz.R")
source("set_token.R")
source("ss_get_result.R")
# API given by stattleship site
set_token("bf3c65fd3952ea434f4a96b641744475")
# set parameters for stattleship search
sport <- 'baseball'
league <- 'mlb'
ep <- 'players'
get.batters <- function(batter.team, sport = sport, league = league, ep = ep){
league.team <- paste(league, batter.team, sep = "-")
q_body <- list(team_id = league.team)
pls <- ss_get_result(sport=sport, league=league, ep=ep, query=q_body, walk=TRUE)
x <- do.call('rbind', lapply(pls, function(x) x$players))
y <- subset(x, x$active == TRUE)
return(y$name)
}
get.slugs <- function(batter.team, sport = sport, league = league, ep = ep){
league.team <- paste(league, batter.team, sep = "-")
q_body <- list(team_id = league.team)
pls <- ss_get_result(sport=sport, league=league, ep=ep, query=q_body, walk=TRUE)
x <- do.call('rbind', lapply(pls, function(x) x$players))
y <- subset(x, x$active == TRUE)
return(y$slug)
}
get.position <- function(batter.team, sport = sport, league = league, ep = ep){
league.team <- paste(league, batter.team, sep = "-")
q_body <- list(team_id = league.team)
pls <- ss_get_result(sport=sport, league=league, ep=ep, query=q_body, walk=TRUE)
x <- do.call('rbind', lapply(pls, function(x) x$players))
y <- subset(x, x$active == TRUE & x$position_name == 'Reliever' | x$position_name == 'Starter')
return(y$position_name)
}
batters <- mapply(get.batters, teams$batter.team, sport, league, ep)
slugs <- mapply(get.slugs, teams$batter.team, sport, league, ep)
position <- mapply(get.position, teams$batter.team, sport, league, ep)
x <- rbind(batters,slugs,position)
dimnames(x)[[2]] <- as.character(teams[,2])
get_df <- function(i){
a <- cbind(data.frame(c(x[1,i],x[2,i])), as.character(teams[i,2]))
dimnames(a)[[2]] <- c('Name','Slug','Position','Team')
return(a)
}
info <- rbind(get_df(1), get_df(2),get_df(3), get_df(4),get_df(5),get_df(6),get_df(7),get_df(8),get_df(9),get_df(10),
get_df(11), get_df(12),get_df(13), get_df(14),get_df(15),get_df(16),get_df(17),get_df(18),get_df(19),get_df(20),
get_df(21), get_df(22),get_df(23), get_df(24),get_df(25),get_df(26),get_df(27),get_df(28),get_df(29),get_df(30))
get_df <- function(i){
a <- cbind(data.frame(c(x[1,i],x[2,i], x[3,i])), as.character(teams[i,2]))
dimnames(a)[[2]] <- c('Name','Slug','Position','Team')
return(a)
}
info <- rbind(get_df(1), get_df(2),get_df(3), get_df(4),get_df(5),get_df(6),get_df(7),get_df(8),get_df(9),get_df(10),
get_df(11), get_df(12),get_df(13), get_df(14),get_df(15),get_df(16),get_df(17),get_df(18),get_df(19),get_df(20),
get_df(21), get_df(22),get_df(23), get_df(24),get_df(25),get_df(26),get_df(27),get_df(28),get_df(29),get_df(30))
View(x)
x[1,1]
x[1,2]
x[1,1]
x[2,1]
x[3,1]
get.position <- function(batter.team, sport = sport, league = league, ep = ep){
league.team <- paste(league, batter.team, sep = "-")
q_body <- list(team_id = league.team)
pls <- ss_get_result(sport=sport, league=league, ep=ep, query=q_body, walk=TRUE)
x <- do.call('rbind', lapply(pls, function(x) x$players))
y <- subset(x, x$active == TRUE)
return(y$position_name)
}
position <- mapply(get.position, teams$batter.team, sport, league, ep)
x <- rbind(batters,slugs,position)
dimnames(x)[[2]] <- as.character(teams[,2])
get_df <- function(i){
a <- cbind(data.frame(c(x[1,i],x[2,i],x[3,i])), as.character(teams[i,2]))
dimnames(a)[[2]] <- c('Name','Slug','Position','Team')
return(a)
}
info <- rbind(get_df(1), get_df(2),get_df(3), get_df(4),get_df(5),get_df(6),get_df(7),get_df(8),get_df(9),get_df(10),
get_df(11), get_df(12),get_df(13), get_df(14),get_df(15),get_df(16),get_df(17),get_df(18),get_df(19),get_df(20),
get_df(21), get_df(22),get_df(23), get_df(24),get_df(25),get_df(26),get_df(27),get_df(28),get_df(29),get_df(30))
View(info)
write.csv(info, "activePlayers.csv")
pitchers <- subset(info, info$position == 'Starter'|info$position == 'Reliever')
View(pitcher.info)
View(pitcherData)
View(pitchers)
pitchers <- subset(info, info$Position == 'Starter'|info$position == 'Reliever')
View(pitchers)
pitchers <- subset(info, info$Position == ('Starter'|'Reliever'))
pitchers <- subset(info, info$Position == 'Starter'|'Reliever')
pitchers <- subset(info, info$Position == 'Starter')
pitchers <- subset(info, info$Position == 'Starter'|info$Position == 'Reliever')
summary(info$Position)
pitchers <- subset(info, info$Position == 'Starter'|info$Position == 'Reliever'|info$Position == 'P')
COUNT(FIND({0,1,2,3,4,5,6,7,8,9}, info$Slug)) >0
substitute(pitchers$Slug, {0,1,2,3,4,5,6,7,8,9},""))
substitute(pitchers$Slug, c(0,1,2,3,4,5,6,7,8,9),""))
which(length(info$Slug > 20))
index(length(info$Slug > 20))
(length(info$Slug > 20))
(length(info$Slug > 30))
(length(info$Slug) > 30)
length(info$Slug) > 30
which(length(info$Slug)) > 30
x <- 'mlb-jose-molina-50b645a7-4083-4158-9c14-43862fbdc57c'
str_split(x, '-')
str_split(x, '-')[3]
unlist(str_split(x, '-'))[3]
unlist(str_split(x, '-'))
unlist(str_split(x, '-'))[1][1]
y <- unlist(str_split(x, '-'))[1]
y
y[1]
y[[1]]
substr(y,1,1)
element <- '5test'
is.na(as.numeric(substr(element,1,1))) == FALSE
is.na(as.numeric(substr(element,1,1)))
element <- 'test'
is.na(as.numeric(substr(element,1,1)))
brokenUp <- unlist(str_split(info$Slug, '-'))
head(brokenUp, n =10)
league.team <- paste(league, 'laa', sep = "-")
q_body <- list(team_id = league.team)
pls <- ss_get_result(sport=sport, league=league, ep=ep, query=q_body, walk=TRUE)
x <- do.call('rbind', lapply(pls, function(x) x$players))
y <- subset(x, x$active == TRUE)
y
pitchers[6520, ]$Slug <- 'mlb-jake-thompson'
pitchers[6520, ]
pitchers[,6520]
subset(pitchers, pitchers$Name == 'Jake Thompson')$Slug <- 'mlb-jake-thompson'
subset(pitchers, pitchers$Name == 'Jake Thompson')
subset(pitchers, pitchers$Name == 'Jake Thompson')$Slug
replace(subset(pitchers, pitchers$Name == 'Jake Thompson')$Slug, 'mlb-jake-thompson')
sub('mlb-jake-thompson-92372972-e5b6-4955-9dca-713b37f75f06', 'mlb-jake-thompson', pitchers$Slug)
subset(pitchers, pitchers$Name == 'Jake Thompson')$Slug
which(pitchers$Name == 'Jake Thompson')
pitchers[867, ]$Slug <- 'mlb-jake-thompson'
pitchers[867, ]$Slug
pitchers[867, ]
pitchers[867, ]$Slug <- 'mlb-jake-thompson'
pitchers <- subset(info, info$Position == 'Starter'|info$Position == 'Reliever'|info$Position == 'P')
write.csv(pitchers, "activePitchers.csv")
write.csv(info, "activePlayers.csv")
decadedata <- read.csv("decadedata.csv", header = FALSE)
headers <- read.csv("fields.csv")
names(decadedata) <- headers$Header
guts_table <- read.csv("guts_table_2016.csv", header = TRUE)
dimnames(guts_table)[[1]] <- guts_table$X
guts_table$X <- NULL
pitcherData <- read.csv("pitcherData2016.csv", header = TRUE)
get_pitcher_splits <- function(pitcher.retrosheet.id, table=guts_table, year = '2016', data = decadedata){
data$season <- with(data, substr(GAME_ID, 4, 7))
LHB <- subset(data, PIT_ID == pitcher.retrosheet.id & BAT_HAND_CD == 'L')
RHB <- subset(data, PIT_ID == pitcher.retrosheet.id & BAT_HAND_CD == 'R')
season <- table[year, ]
RH.PA <- nrow(RHB)
LH.PA <- nrow(LHB)
RHB$SINGLES <- ifelse(RHB$EVENT_CD == 20, 1, 0)
RHB$DOUBLES <- ifelse(RHB$EVENT_CD == 21, 1, 0)
RHB$TRIPLES <- ifelse(RHB$EVENT_CD == 22, 1, 0)
RHB$HRS <- ifelse(RHB$EVENT_CD == 23, 1, 0)
RHB$BB <- ifelse(RHB$EVENT_CD == 14, 1, 0)
RHB$IBB <- ifelse(RHB$EVENT_CD == 15, 1, 0)
RHB$SAC <- ifelse(RHB$SH_FL == TRUE|RHB$SF_FL == TRUE, 1, 0)
RHB$AB <- ifelse(RHB$EVENT_CD == 6|RHB$EVENT_CD == 8|RHB$EVENT_CD == 14|RHB$EVENT_CD == 15|RHB$EVENT_CD == 16|RHB$EVENT_CD == 17|RHB$SH_FL == TRUE|RHB$SF_FL == TRUE, 0, 1)
pitcher.R.wOBA <- round(((with(season, (wBB * sum(RHB$BB) + (wHBP * sum(RHB$HBP)) + (w1B * sum(RHB$SINGLES)) + (w2B * sum(RHB$DOUBLES)) + 	(w3B * sum(RHB$TRIPLES)) + (wHR * sum(RHB$HRS)))/(sum(RHB$AB) + sum(RHB$BB) - sum(RHB$IBB) + sum(RHB$HBP) + sum(RHB$SAC))))),4)
LHB$SINGLES <- ifelse(LHB$EVENT_CD == 20, 1, 0)
LHB$DOUBLES <- ifelse(LHB$EVENT_CD == 21, 1, 0)
LHB$TRIPLES <- ifelse(LHB$EVENT_CD == 22, 1, 0)
LHB$HRS <- ifelse(LHB$EVENT_CD == 23, 1, 0)
LHB$BB <- ifelse(LHB$EVENT_CD == 14, 1, 0)
LHB$IBB <- ifelse(LHB$EVENT_CD == 15, 1, 0)
LHB$SAC <- ifelse(LHB$SH_FL == TRUE|LHB$SF_FL == TRUE, 1, 0)
LHB$AB <- ifelse(LHB$EVENT_CD == 6|LHB$EVENT_CD == 8|LHB$EVENT_CD == 14|LHB$EVENT_CD == 15|LHB$EVENT_CD == 16|LHB$EVENT_CD == 17|LHB$SH_FL == TRUE|LHB$SF_FL == TRUE, 0, 1)
pitcher.L.wOBA <- round(((with(season, (wBB * sum(LHB$BB) + (wHBP * sum(LHB$HBP)) + (w1B * sum(LHB$SINGLES)) + (w2B * sum(LHB$DOUBLES)) + 	(w3B * sum(LHB$TRIPLES)) + (wHR * sum(LHB$HRS)))/(sum(LHB$AB) + sum(LHB$BB) - sum(LHB$IBB) + sum(LHB$HBP) + sum(LHB$SAC))))),4)
avg <- (pitcher.R.wOBA + pitcher.L.wOBA)/2
if (RH.PA < 500 & LH.PA > 500){
return(c(0,pitcher.L.wOBA,avg))
}
if (LH.PA < 500 & RH.PA > 500){
return(c(pitcher.R.wOBA, 0, avg))
}
if (RH.PA >= 500 & LH.PA >= 500){
return(c(pitcher.R.wOBA,pitcher.L.wOBA, avg))
}
if (RH.PA < 500 & LH.PA < 500){
return(c(0,0,avg))
}
}
psplits <- mapply(get_pitcher_splits, pitcherData$retro_id, guts_table, '2016', decadedata)
decadedata <- read.csv("decadedata.csv", header = FALSE)
headers <- read.csv("fields.csv")
names(decadedata) <- headers$Header
pwd
wd()
setwd('~/Desktop/run-expectancy')
decadedata <- read.csv("decadedata.csv", header = FALSE)
headers <- read.csv("fields.csv")
names(decadedata) <- headers$Header
decadedata <- read.csv("decadedata-withwinners.csv", header = FALSE)
decadedata <- read.csv("decadedata-withWinners.csv", header = FALSE)
headers <- read.csv("fields.csv")
names(decadedata) <- headers$Header
decadedata <- read.csv("decadedata-withWinners.csv", header = FALSE)
headers <- read.csv("fields.csv")
names(decadedata) <- headers$Header
psplits <- mapply(get_pitcher_splits, pitcherData$retro_id, guts_table, '2016', decadedata)
pitcherData$retro_id
psplits <- sapply(pitcherData$retro_id, get_pitcher_splits)
psplits <- sapply(as.character(pitcherData$retro_id), get_pitcher_splits)
head(pslits, n = 10)
head(psplits, n = 10)
get_pitcher_splits('achta001')
pitcher.retrosheet.id <- 'achta001'
decadedata$season <- with(data, substr(GAME_ID, 4, 7))
LHB <- subset(decadedata, PIT_ID == pitcher.retrosheet.id & BAT_HAND_CD == 'L')
RHB <- subset(decadedata, PIT_ID == pitcher.retrosheet.id & BAT_HAND_CD == 'R')
season <- guts_table[year, ]
RH.PA <- nrow(RHB)
LH.PA <- nrow(LHB)
View(season)
RHB$SINGLES <- ifelse(RHB$EVENT_CD == 20, 1, 0)
RHB$DOUBLES <- ifelse(RHB$EVENT_CD == 21, 1, 0)
RHB$TRIPLES <- ifelse(RHB$EVENT_CD == 22, 1, 0)
RHB$HRS <- ifelse(RHB$EVENT_CD == 23, 1, 0)
RHB$BB <- ifelse(RHB$EVENT_CD == 14, 1, 0)
RHB$IBB <- ifelse(RHB$EVENT_CD == 15, 1, 0)
RHB$SAC <- ifelse(RHB$SH_FL == TRUE|RHB$SF_FL == TRUE, 1, 0)
RHB$AB <- ifelse(RHB$EVENT_CD == 6|RHB$EVENT_CD == 8|RHB$EVENT_CD == 14|RHB$EVENT_CD == 15|RHB$EVENT_CD == 16|RHB$EVENT_CD == 17|RHB$SH_FL == TRUE|RHB$SF_FL == TRUE, 0, 1)
pitcher.R.wOBA <- round(((with(season, (wBB * sum(RHB$BB) + (wHBP * sum(RHB$HBP)) + (w1B * sum(RHB$SINGLES)) + (w2B * sum(RHB$DOUBLES)) + 	(w3B * sum(RHB$TRIPLES)) + (wHR * sum(RHB$HRS)))/(sum(RHB$AB) + sum(RHB$BB) - sum(RHB$IBB) + sum(RHB$HBP) + sum(RHB$SAC))))),4)
View(RHB)
LHB <- subset(decadedata, PIT_ID == pitcher.retrosheet.id & BAT_HAND_CD == 'L')
decadedata$PIT_ID == pitcher.retrosheet.id
sum(decadedata$PIT_ID == pitcher.retrosheet.id)
View(pitcherData)
sum(decadedata$PIT_ID == 'pricd001')
sum(decadedata$PIT_ID == 'pricd01')
View(decadedata)
decadedata <- read.csv("decadedata-withWinners.csv", header = TRUE)
sum(decadedata$PIT_ID == 'pricd001')
get_pitcher_splits(pitcher.retrosheet.id)
get_pitcher_splits('pricd001')
psplits <- sapply(as.character(pitcherData$retro_id), get_pitcher_splits)
teams <- read.csv("teams2016.csv", header = TRUE)
dimnames(teams)[[1]] <- teams$X
teams$X <- NULL
View(teams)
teams$batter.team
probabilities('Red Sox', 'Orioles', 'David Ortiz', 'Chris Tillman', 'AL', '000 0', 'c30', 'tillc001')
probabilities <- function(batter.team, pitcher.team, batter, pitcher, league, state, count, pitcher.id){
suppressWarnings(python.load("probabilities.py"))
percents <- python.call("get_probabilities", batter.team, pitcher.team, batter, pitcher, league, state, count)
print(percents)
}
probabilities('Red Sox', 'Orioles', 'David Ortiz', 'Chris Tillman', 'AL', '000 0', 'c30', 'tillc001')
probabilities('Red Sox', 'Orioles', 'Jackie Bradley Jr.', 'Chris Tillman', 'AL', '000 0', 'c30', 'tillc001')
probabilities('Red Sox', 'Orioles', 'Jackie Bradley Jr.', 'Chris Tillman', 'AL', '000 0', 'c30', 'tillc001')
runApp()
runApp()
runApp()
runApp()
(as.character(activePlayers[which(teams['Red Sox', 2]==activePlayers$Team),2]))
(as.character(activePlayers[which(teams['Red Sox', 2]==activePlayers$Team),1]))
runApp()
(as.character(activePlayers[which(teams['Red Sox', 2]==activePlayers$Team),1]))
runApp()
available_pitchers <- (as.character(activePlayers[which(teams['Red Sox', 2]==activePlayers$Team) && activePlayers$Position == 'Reliever' || activePlayers$Postion == 'Starter',1]))
available_pitchers
available_pitchers <- (as.character(activePlayers[which(teams['Red Sox', 2]==activePlayers$Team) & activePlayers$Position == 'Reliever' | activePlayers$Postion == 'Starter',1]))
available_pitchers <- (as.character(activePlayers[which(teams['Red Sox', 2]==activePlayers$Team),1]))
available_pitchers
summary(activePlayers$Position)
runApp()
runApp()
(as.character(activePitchers[which(teams['Cardinals', 2]==activePitchers$Team),1]))
activePitchers <- subset(activePlayers, Position == 'Starter'|Position == 'Reliever'|Position == 'P')
(as.character(activePitchers[which(teams['Cardinals', 2]==activePitchers$Team),1]))
runApp()
(as.character(activePitchers[which(teams['Astros', 2]==activePitchers$Team),1]))
runApp()
runApp()
