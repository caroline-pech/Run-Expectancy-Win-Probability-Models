library("devtools")
devtools::install_github("stattleship/stattleship-r")
library(stattleshipR)
set_token("bf3c65fd3952ea434f4a96b641744475")
sport <- 'baseball'
league <- 'mlb'
ep <- 'game_logs'
league.team <- paste(league, 'bos', sep = "-")
q_body <- list(team_id=league.team, status='upcoming', interval_type='regularseason')
gls <- ss_get_result(sport=sport, league=league, ep=ep, query=q_body, walk=TRUE)
gls
ep <- 'players'
q_body <- list(team_id = league.team)
pls <- ss_get_result(sport=sport, league=league, ep=ep, query=q_body, walk=TRUE)
players<-do.call('rbind', lapply(pls, function(x) x$players))
colnames(players)[1] <- 'player_id'
game_logs<-do.call('rbind', lapply(gls, function(x) x$game_logs))
game_logs <- merge(players, game_logs, by='player_id')
View(players)
read.csv("all2010.csv", header = FALSE)
read.csv("all2010.csv", header = FALSE)
a<-read.csv("all2010.csv", header = FALSE)
a<-read.csv("all2010.csv", header = FALSE)
f<-read.csv("all2015.csv", header = FALSE)
all2010 <- read.csv("~/Desktop/RE&WP/Final.RE/run-expectancy/all2010.csv", header=FALSE)
View(all2010)
a<- all2010
191835/2
halfa <- a[[1:95917]]
halfa <- a[[1:95917,]]
a[[1, ]]
a[1, ]
halfa <- a[1:95917,]
half2a <- a[95918:191835]
half2a <- a[95918:191835,]
all2011 <- read.csv("~/Desktop/RE&WP/Final.RE/run-expectancy/all2011.csv", header=FALSE)
View(all2011)
all2012 <- read.csv("~/Desktop/RE&WP/Final.RE/run-expectancy/all2012.csv", header=FALSE)
View(all2012)
all2013 <- read.csv("~/Desktop/Extras/all2013.csv", header=FALSE)
View(all2013)
all2014 <- read.csv("~/Desktop/RE&WP/Final.RE/run-expectancy/all2014.csv", header=FALSE)
View(all2014)
all2015 <- read.csv("~/Desktop/Extras/all2015.csv", header=FALSE)
View(all2015)
191864/2
190774/2
190907/2
189982/2
189591
189591/2
halfa <- a[1:95917,]
half2a <- a[95918:191835,]
halfb <- a[1:95932,]
half2b <- a[95933:191864,]
halfc <- a[1:95387,]
half2c <- a[95388:190774,]
halfd <- a[1:95453,]
half2d <- a[95454:190907,]
halfe <- a[1:94991,]
half2e <- a[94992:189982,]
halff <- a[1:94795,]
half2f <- a[94796:189591,]
write.csv(halfa)
write.csv(halfa, file="csvs", row.names = FALSE)
write.csv(halfa, file="csvs", row.names = FALSE)
write.csv(halfa, file="csvs", row.names = FALSE)
write.csv(halfa, file="csvs", row.names = FALSE)
write.csv(halfa, "2010A", row.names = FALSE)
write.csv(half2a,"2010B", row.names = FALSE)
write.csv(halfb,"2011A", row.names = FALSE)
write.csv(half2b,"2011B", row.names = FALSE)
write.csv(halfc,"2012A", row.names = FALSE)
write.csv(half2c,"2012B", row.names = FALSE)
write.csv(halfd,"2013A", row.names = FALSE)
write.csv(half2d,"2013B", row.names = FALSE)
write.csv(halfe,"2014A", row.names = FALSE)
write.csv(half2e,"2014B", row.names = FALSE)
write.csv(halff,"2015A", row.names = FALSE)
write.csv(half2f,"2015B", row.names = FALSE)
shiny::runApp('Desktop/RE&WP/Final.RE')
runApp('Desktop/RE&WP/Final.RE')
shiny::runApp('Desktop/run-expectancy')
probabilities('Red Sox', 'Orioles', 'David Ortiz', 'Chris Tillman', 'AL', '000 0', 'c30', 'tillc001')
suppressWarnings(python.load("probabilities.py"))
setwd('~/Desktop/run-expectancy')
suppressWarnings(python.load("probabilities.py"))
probabilities('Red Sox', 'Orioles', 'David Ortiz', 'Chris Tillman', 'AL', '000 0', 'c30', 'tillc001')
pitcher_batter_WP(wpstates, '1 1', '000 0', 'c00', 0, 'Red Sox', 'Orioles', 'Chris Tillman', 'Mookie Betts', 'Orioles', 'Red Sox', count.state, records, teams, 'AL'){
pitcher_batter_WP(wpstates, '1 1', '000 0', 'c00', 0, 'Red Sox', 'Orioles', 'Chris Tillman', 'Mookie Betts', 'Orioles', 'Red Sox', count.state, records, teams, 'AL')
standings <- function(home_team, visiting_team, team_info, records, wpstate, half_inning){
hleague <- teams[home_team, 3]
# get league of away team
aleague <- teams[visiting_team, 3]
# get abbreviation of home team
home_team <- teams[home_team,8]
# get abbreviation of away team
visiting_team <- teams[visiting_team,8]
# if an interleague game, use a different set of calculations
if(hleague != aleague){
# get records for both teams (interleague record)
hrecord <- subset(records, records$Team == home_team & records$Opponent == as.character(aleague))
arecord <- subset(records, records$Team == visiting_team & records$Opponent == as.character(hleague))
# if home team or away team hasn't played any games against a team from the other league, use their total record to calculate winning percentage
if(hrecord$Wins + hrecord$Losses == 0){
hrecord <- subset(records, records$Team == home_team)
hpercentage <- sum(hrecord$Wins)/(sum(hrecord$Losses)+sum(hrecord$Wins))
}
if(arecord$Wins + arecord$Losses == 0){
arecord <- subset(records, records$Team == home_team)
apercentage <- sum(arecord$Wins)/(sum(arecords$Losses)+sum(arecords$Wins))
}else{
# otherwise just calculate winning percentage from interleague games
hpercentage <- as.numeric(hrecord$Wins)/(as.numeric(hrecord$Losses)+as.numeric(hrecord$Wins))
apercentage <- as.numeric(arecord$Wins)/(as.numeric(arecord$Losses)+as.numeric(arecord$Wins))
}
# calculate win probability for home team against the visiting team
P_ab <- (hpercentage-apercentage)+0.5
}else if(home_team == visiting_team){
# if home screen is set (for example Angels v. Angels), return generic win probability
P_ab <- 0.5
}else{
# if game is between teams in the same league, get record of both teams, and calculate total number of games each team has played
record_a <- subset(records, records$Team == as.character(home_team))
games_a <- as.numeric(sum(record_a$Wins) + sum(record_a$Losses))
record_b <- subset(records, records$Team == as.character(visiting_team))
games_b <- as.numeric(sum(record_b$Wins) + sum(record_b$Losses))
# if no games have been played by one team, return generic win probability
if(games_a == 0){
P_ab <- 0.5
}else if(games_b == 0){
P_ab <- 0.5
# otherwise find win probabilities for each team and use log5 equation for probability between two teams
}else{
P_a <- as.numeric(sum(record_a$Wins)/games_a)
P_b <-as.numeric(sum(record_b$Wins)/games_b)
P_ab <- (P_a - (P_a * P_b))/(P_a + P_b - (2*(P_a*P_b)))
}
}
# find the amount above or below the basic 50/50 chances
x <- P_ab - 0.50
# value the team standings propotionally less as the game continues, and multiply by updated state to get the win probability with the team standings
wp_with_team_standing <- as.numeric(wpstate)*(1+x/as.numeric(substr(half_inning,1,1)))
# check that high probability cases do not exceed 1 and low probability cases do not fall below 0
if(wpstate > 0.90){
wp_with_team_standing <- min(wp_with_team_standing, 0.9999)
}else if(wpstate < 0.1){
wp_with_team_standing <- max(wp_with_team_standing, 0.01)
}
bpf <- as.numeric(team_info[home_team, 9])
if(bpf > 1){
pf <- wp_with_team_standing * bpf
dif <- pf - wp_with_team_standing
wp_team_park <- wp_with_team_standing - dif
}else{
wp_team_park <- wp_with_team_standing * bpf
}
return(round(wp_team_park,3))
}
standings <- function(home_team, visiting_team, team_info, records, wpstate, half_inning){
hleague <- teams[home_team, 3]
# get league of away team
aleague <- teams[visiting_team, 3]
# get abbreviation of home team
home_team <- teams[home_team,8]
# get abbreviation of away team
visiting_team <- teams[visiting_team,8]
# if an interleague game, use a different set of calculations
if(hleague != aleague){
# get records for both teams (interleague record)
hrecord <- subset(records, records$Team == home_team & records$Opponent == as.character(aleague))
arecord <- subset(records, records$Team == visiting_team & records$Opponent == as.character(hleague))
# if home team or away team hasn't played any games against a team from the other league, use their total record to calculate winning percentage
if(hrecord$Wins + hrecord$Losses == 0){
hrecord <- subset(records, records$Team == home_team)
hpercentage <- sum(hrecord$Wins)/(sum(hrecord$Losses)+sum(hrecord$Wins))
}
if(arecord$Wins + arecord$Losses == 0){
arecord <- subset(records, records$Team == home_team)
apercentage <- sum(arecord$Wins)/(sum(arecords$Losses)+sum(arecords$Wins))
}else{
# otherwise just calculate winning percentage from interleague games
hpercentage <- as.numeric(hrecord$Wins)/(as.numeric(hrecord$Losses)+as.numeric(hrecord$Wins))
apercentage <- as.numeric(arecord$Wins)/(as.numeric(arecord$Losses)+as.numeric(arecord$Wins))
}
# calculate win probability for home team against the visiting team
P_ab <- (hpercentage-apercentage)+0.5
}else if(home_team == visiting_team){
# if home screen is set (for example Angels v. Angels), return generic win probability
P_ab <- 0.5
}else{
# if game is between teams in the same league, get record of both teams, and calculate total number of games each team has played
record_a <- subset(records, records$Team == as.character(home_team))
games_a <- as.numeric(sum(record_a$Wins) + sum(record_a$Losses))
record_b <- subset(records, records$Team == as.character(visiting_team))
games_b <- as.numeric(sum(record_b$Wins) + sum(record_b$Losses))
# if no games have been played by one team, return generic win probability
if(games_a == 0){
P_ab <- 0.5
}else if(games_b == 0){
P_ab <- 0.5
# otherwise find win probabilities for each team and use log5 equation for probability between two teams
}else{
P_a <- as.numeric(sum(record_a$Wins)/games_a)
P_b <-as.numeric(sum(record_b$Wins)/games_b)
P_ab <- (P_a - (P_a * P_b))/(P_a + P_b - (2*(P_a*P_b)))
}
}
# find the amount above or below the basic 50/50 chances
x <- P_ab - 0.50
# value the team standings propotionally less as the game continues, and multiply by updated state to get the win probability with the team standings
wp_with_team_standing <- as.numeric(wpstate)*(1+x/as.numeric(substr(half_inning,1,1)))
# check that high probability cases do not exceed 1 and low probability cases do not fall below 0
if(wpstate > 0.90){
wp_with_team_standing <- min(wp_with_team_standing, 0.9999)
}else if(wpstate < 0.1){
wp_with_team_standing <- max(wp_with_team_standing, 0.01)
}
bpf <- as.numeric(team_info[home_team, 9])
if(bpf > 1){
pf <- wp_with_team_standing * bpf
dif <- pf - wp_with_team_standing
wp_team_park <- wp_with_team_standing - dif
}else{
wp_team_park <- wp_with_team_standing * bpf
}
return(round(wp_team_park,3))
}
pitcher_batter_WP(wpstates, '1 1', '000 0', 'c00', 0, 'Red Sox', 'Orioles', 'Chris Tillman', 'Mookie Betts', 'Orioles', 'Red Sox', count.state, records, teams, 'AL'){
pitcher_batter_WP(wpstates, '1 1', '000 0', 'c00', 0, 'Red Sox', 'Orioles', 'Chris Tillman', 'Mookie Betts', 'Orioles', 'Red Sox', count.state, records, teams, 'AL')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
get_retrosheet_id('Al Alburquerque', 'LAA', pitcher_info)
get_retrosheet_id('Al Alburquerque', 'laa', pitcher_info)
get_retrosheet_id('Al Alburquerque', 'ana', pitcher_info)
get_retrosheet_id('David Price', 'bos', pitcher_info)
get_retrosheet_id('David Price', 'BOS', pitcher_info)
View(pitcher_info)
get_retrosheet_id('David Price', 'bos', pitcher_info)
get_retrosheet_id <- function(pitcher_name, pitcher_team, pitcher_info){
# find retrosheet id using pitcher's name and current team
retrosheet_id <- as.character(subset(pitcher_info, retro_name == pitcher_name & mlb_team == pitcher_team)$retro_id)
return(retrosheet_id)
}
get_retrosheet_id('David Price', 'bos', pitcher_info)
get_retrosheet_id('David Price', 'BOS', pitcher_info)
get_retrosheet_id('Al Alburquerque', 'LAA', pitcher_info)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
probabilities <- function(batter_team, pitcher_team, batter, pitcher, league, state, count){
suppressWarnings(python.load("probabilities.py"))
print(c(as.character(batter_team), as.character(pitcher_team), as.character(batter), as.character(pitcher), as.character(league), as.character(state), as.character(count)))
percents <- python.call("get_probabilities", as.character(batter_team), as.character(pitcher_team), as.character(batter), as.character(pitcher), as.character(league), as.character(state), as.character(count))
return(percents)
}
probabilities('Angels', 'Astros', 'Jose Altuve', 'Al Alburquerque', 'AL', '000 0', 'c00')
probabilities('Astros', 'Angels', 'Jose Altuve', 'Al Alburquerque', 'AL', '000 0', 'c00')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
install.packages("DT")
library('DT')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
prob <- c(21.1422,5.5265,1.0319,6.7833,5.0601)
prob[1]
for(i in prob){
prob[i] = paste(prob[i], '%', sep = "")
}
prob
prob[1]
prob <- c(21.1422,5.5265,1.0319,6.7833,5.0601)
for(i in prob){
print(i)
prob[i] = paste(prob[i], '%', sep = "")
}
prob
prob <- c(21.1422,5.5265,1.0319,6.7833,5.0601)
for(i in prob){
print(i)
prob[a] = paste(prob[a], '%', sep = "")
a <- a + 1
}
a <- 0
prob[a]
prob[0]
prob
prob[0]
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
install.packages(shinyjs)
install.packages("shinyjs")
library(shinyjs)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
