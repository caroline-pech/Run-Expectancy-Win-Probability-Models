league <- 'mlb'
ep <- 'game_logs'
league.team <- paste(league, 'tor', sep = "-")
q_body <- list(player_id = 'mlb-andrew-burns', status='ended', interval_type='regularseason')
gls <- ss_get_result(sport=sport, league=league, ep=ep, query=q_body, walk=TRUE)
gls
set_token("bf3c65fd3952ea434f4a96b641744475")
sport <- 'baseball'
league <- 'mlb'
ep <- 'game_logs'
league.team <- paste(league, 'tor', sep = "-")
q_body <- list(player_id = 'mlb-c-j-burns', status='ended', interval_type='regularseason')
gls <- ss_get_result(sport=sport, league=league, ep=ep, query=q_body, walk=TRUE)
gls
set_token("bf3c65fd3952ea434f4a96b641744475")
sport <- 'baseball'
league <- 'mlb'
ep <- 'game_logs'
league.team <- paste(league, 'tor', sep = "-")
q_body <- list(player_id = 'mlb-c-j-wilson', status='ended', interval_type='regularseason')
gls <- ss_get_result(sport=sport, league=league, ep=ep, query=q_body, walk=TRUE)
gls
set_token("bf3c65fd3952ea434f4a96b641744475")
sport <- 'baseball'
league <- 'mlb'
ep <- 'game_logs'
league.team <- paste(league, 'laa', sep = "-")
q_body <- list(player_id = 'mlb-c-j-wilson', status='ended', interval_type='regularseason')
gls <- ss_get_result(sport=sport, league=league, ep=ep, query=q_body, walk=TRUE)
gls
set_token("bf3c65fd3952ea434f4a96b641744475")
sport <- 'baseball'
league <- 'mlb'
ep <- 'game_logs'
league.team <- paste(league, 'ana', sep = "-")
q_body <- list(player_id = 'mlb-c-j-wilson', status='ended', interval_type='regularseason')
gls <- ss_get_result(sport=sport, league=league, ep=ep, query=q_body, walk=TRUE)
set_token("bf3c65fd3952ea434f4a96b641744475")
sport <- 'baseball'
league <- 'mlb'
ep <- 'game_logs'
league.team <- paste(league, 'tor', sep = "-")
q_body <- list(player_id = 'mlb-j-a-happ', status='ended', interval_type='regularseason')
gls <- ss_get_result(sport=sport, league=league, ep=ep, query=q_body, walk=TRUE)
gls
batter.name <- 'C.J. Wilson'
name <- replace(batter.name, ".", " ")
name
"." %in% batter.name
batter.name
grep(".", batter.name)
grepl("^[.]", batter.name)
sub("."," ", batter.name)
sub("C"," ", batter.name)
sub("."," ", batter.name)
sub("\\."," ", batter.name)
replace(batter.name, "\\.", " ")
sub("\\."," ", batter.name)
gsub("\\."," ", batter.name)
name <-  gsub("\\."," ", batter.name)
player_id = tolower(paste('mlb', as.character(sub(" ", "-", batter.name)), sep ="-"))
player_id
name
player_id = tolower(paste('mlb', as.character(sub(" ", "-", name)), sep ="-"))
player_id
player_id = tolower(paste('mlb', as.character(gsub(" ", "-", name)), sep ="-"))
player_id
name <- gsub("  ", " ", name)
name
player_id = tolower(paste('mlb', as.character(gsub(" ", "-", name)), sep ="-"))
player_id
fun1('Angels','Blue Jays','Angels','C.J. Wilson','000 0','c00','Andrew Burns')
fun1('Angels','Blue Jays','Angels','Adam Wilk','000 0','c00','J.A. Happ')
batter.name <- 'J.A. Happ'
name <-  gsub("\\."," ", batter.name)
name <- gsub("  ", " ", name)
name
player_id = tolower(paste('mlb', as.character(gsub(" ", "-", name)), sep ="-"))
player_id
roster <- roster.wOBA('tor', player_id, splits, table, '2016')
roster <- roster.wOBA('tor', player_id, splits, guts_table, '2016')
roster
roster == NULL
roster[1, ]
roster[1,1]
roster[1,1] == NA
roster[1,1] == 'NA'
roster[1,1] == NULL
nrow(roster)
get.run.expectancy <- function(home.team, batter.team, batter.name, pitcher.name, pitcher.team, year = '2016', pitcherSplits = pitcherSplits, table = guts_table, team.info = teams){
pfyear <- as.numeric(year) - 1
BPF <- park.factors(home.team, pfyear, team.info, game.logs)
home.team <- as.character(team.info[home.team, 1])
batter.team <- team.info[batter.team, 2]
pitcher.team <- team.info[pitcher.team, 5]
#pitching stats -- splits
pitcher.retrosheet.id <- as.character(get.retrosheet.id(pitcher.name, pitcher.team, pitcherData))
p.splits <- pitcherSplits[, pitcher.retrosheet.id]
p.splits.R <- p.splits[1]
p.splits.L <- p.splits[2]
avg <- p.splits[3]
#team batting stats
name <-  gsub("\\."," ", batter.name)
name <- gsub("  ", " ", name)
player_id = tolower(paste('mlb', as.character(gsub(" ", "-", name)), sep ="-"))
roster <- roster.wOBA(batter.team, player_id, splits, table, '2016')
if (nrow(roster) == 0){
roster$woba <- average.woba(splits, table = guts_table, year = '2015')
}else{
roster$avg.woba <- with(roster,(woba) - (woba * (woba - opp.wOBA)))}
roster$opp.wOBA <- ifelse(roster$bats == 'bats_right', p.splits.R, (ifelse(roster$bats =='bats_left', p.splits.L, avg)))
league.wOBA <- table[year,1]
current.scale <- table[year,2]
roster$RV.Per.PA <- round(with(roster,(as.numeric(avg.woba) - as.numeric(lg_woba))/woba_scale) * BPF,4)
roster <- roster[-c(4:29)]
return(roster)
}
get.run.expectancy("Angels","Blue Jays","J.A. Happ","Adam Wilk","Angles")
home.team <- 'Angels'
batter.team <- 'Blue Jays'
batter.name <- 'J.A. Happ'
pitcher.name <- 'Adam Wilk'
pitcher.team <- 'Angels'
table <- guts_table
team.info <- teams
pfyear <- as.numeric(year) - 1
BPF <- park.factors(home.team, pfyear, team.info, game.logs)
home.team <- as.character(team.info[home.team, 1])
batter.team <- team.info[batter.team, 2]
pitcher.team <- team.info[pitcher.team, 5]
pitcher.retrosheet.id <- as.character(get.retrosheet.id(pitcher.name, pitcher.team, pitcherData))
p.splits <- pitcherSplits[, pitcher.retrosheet.id]
p.splits.R <- p.splits[1]
p.splits.L <- p.splits[2]
avg <- p.splits[3]
name <-  gsub("\\."," ", batter.name)
name <- gsub("  ", " ", name)
player_id = tolower(paste('mlb', as.character(gsub(" ", "-", name)), sep ="-"))
player_id
roster <- roster.wOBA(batter.team, player_id, splits, table, '2016')
if (nrow(roster) == 0){
roster$woba <- average.woba(splits, table = guts_table, year = '2015')
}else{
roster$avg.woba <- with(roster,(woba) - (woba * (woba - opp.wOBA)))}
stats
get.run.expectancy <- function(home.team, batter.team, batter.name, pitcher.name, pitcher.team, year = '2016', pitcherSplits = pitcherSplits, table = guts_table, team.info = teams){
pfyear <- as.numeric(year) - 1
BPF <- park.factors(home.team, pfyear, team.info, game.logs)
home.team <- as.character(team.info[home.team, 1])
batter.team <- team.info[batter.team, 2]
pitcher.team <- team.info[pitcher.team, 5]
#pitching stats -- splits
pitcher.retrosheet.id <- as.character(get.retrosheet.id(pitcher.name, pitcher.team, pitcherData))
p.splits <- pitcherSplits[, pitcher.retrosheet.id]
p.splits.R <- p.splits[1]
p.splits.L <- p.splits[2]
avg <- p.splits[3]
#team batting stats
name <-  gsub("\\."," ", batter.name)
name <- gsub("  ", " ", name)
player_id = tolower(paste('mlb', as.character(gsub(" ", "-", name)), sep ="-"))
roster <- roster.wOBA(batter.team, player_id, splits, table, '2016')
league.wOBA <- table[year,1]
current.scale <- table[year,2]
if (nrow(roster) == 0){
woba <- average.woba(splits, table = guts_table, year = '2015')
opp.woba <- ifelse(roster$bats == 'bats_right', p.splits.R, (ifelse(roster$bats =='bats_left', p.splits.L, avg)))
RV.Per.PA <- round(((as.numeric(avg.woba) - as.numeric(lg_woba))/woba_scale) * BPF,4)
return(c(woba,opp.woba,RV.Per.PA))
}else{
roster$avg.woba <- with(roster,(woba) - (woba * (woba - opp.wOBA)))
roster$opp.wOBA <- ifelse(roster$bats == 'bats_right', p.splits.R, (ifelse(roster$bats =='bats_left', p.splits.L, avg)))
roster$RV.Per.PA <- round(with(roster,(as.numeric(avg.woba) - as.numeric(lg_woba))/woba_scale) * BPF,4)
roster <- roster[-c(4:29)]
return(roster)
}
}
get.run.expectancy("Angels","Blue Jays","J.A. Happ","Adam Wilk","Angles")
if (nrow(roster) == 0){
woba <- average.woba(splits, table = guts_table, year = '2015')
opp.woba <- ifelse(roster$bats == 'bats_right', p.splits.R, (ifelse(roster$bats =='bats_left', p.splits.L, avg)))
RV.Per.PA <- round(((as.numeric(avg.woba) - as.numeric(lg_woba))/woba_scale) * BPF,4)
return(c(woba,opp.woba,RV.Per.PA))}
if (nrow(roster) == 0){
avg.woba <- average.woba(splits, table = guts_table, year = '2015')
opp.woba <- ifelse(roster$bats == 'bats_right', p.splits.R, (ifelse(roster$bats =='bats_left', p.splits.L, avg)))
RV.Per.PA <- round(((as.numeric(avg.woba) - as.numeric(lg_woba))/woba_scale) * BPF,4)
return(c(woba,opp.woba,RV.Per.PA))
}
league.wOBA <- table[year,1]
current.scale <- table[year,2]
if (nrow(roster) == 0){
avg.woba <- average.woba(splits, table = guts_table, year = '2015')
opp.woba <- ifelse(roster$bats == 'bats_right', p.splits.R, (ifelse(roster$bats =='bats_left', p.splits.L, avg)))
RV.Per.PA <- round(((as.numeric(avg.woba) - as.numeric(lg_woba))/woba_scale) * BPF,4)
return(c(woba,opp.woba,RV.Per.PA))
}
league.wOBA <- table[year,1]
current.scale <- table[year,2]
if (nrow(roster) == 0){
avg.woba <- average.woba(splits, table = guts_table, year = '2015')
opp.woba <- ifelse(roster$bats == 'bats_right', p.splits.R, (ifelse(roster$bats =='bats_left', p.splits.L, avg)))
RV.Per.PA <- round(((as.numeric(avg.woba) - as.numeric(league.wOBA))/current.scale) * BPF,4)
return(c(woba,opp.woba,RV.Per.PA))
}
get.run.expectancy <- function(home.team, batter.team, batter.name, pitcher.name, pitcher.team, year = '2016', pitcherSplits = pitcherSplits, table = guts_table, team.info = teams){
pfyear <- as.numeric(year) - 1
BPF <- park.factors(home.team, pfyear, team.info, game.logs)
home.team <- as.character(team.info[home.team, 1])
batter.team <- team.info[batter.team, 2]
pitcher.team <- team.info[pitcher.team, 5]
#pitching stats -- splits
pitcher.retrosheet.id <- as.character(get.retrosheet.id(pitcher.name, pitcher.team, pitcherData))
p.splits <- pitcherSplits[, pitcher.retrosheet.id]
p.splits.R <- p.splits[1]
p.splits.L <- p.splits[2]
avg <- p.splits[3]
#team batting stats
name <-  gsub("\\."," ", batter.name)
name <- gsub("  ", " ", name)
player_id = tolower(paste('mlb', as.character(gsub(" ", "-", name)), sep ="-"))
roster <- roster.wOBA(batter.team, player_id, splits, table, '2016')
league.wOBA <- table[year,1]
current.scale <- table[year,2]
if (nrow(roster) == 0){
avg.woba <- average.woba(splits, table = guts_table, year = '2015')
opp.woba <- ifelse(roster$bats == 'bats_right', p.splits.R, (ifelse(roster$bats =='bats_left', p.splits.L, avg)))
RV.Per.PA <- round(((as.numeric(avg.woba) - as.numeric(league.wOBA))/current.scale) * BPF,4)
return(c(woba,opp.woba,RV.Per.PA))
}else{
roster$avg.woba <- with(roster,(woba) - (woba * (woba - opp.wOBA)))
roster$opp.wOBA <- ifelse(roster$bats == 'bats_right', p.splits.R, (ifelse(roster$bats =='bats_left', p.splits.L, avg)))
roster$RV.Per.PA <- round(with(roster,(as.numeric(avg.woba) - as.numeric(lg_woba))/woba_scale) * BPF,4)
roster <- roster[-c(4:29)]
return(roster)
}
}
get.run.expectancy("Angels","Blue Jays","J.A. Happ","Adam Wilk","Angles")
x <- list('a','b','c')
typeof(X)
typeof(x)
typeof(x) == 'list'
x <- 5
typeof(x)
roster.wOBA <- function(batter.team, player_id, splits, table = guts_table, year = '2016'){
# library("devtools")
# devtools::install_github("stattleship/stattleship-r")
# library(stattleshipR)
source("zzz.R")
source("set_token.R")
source("ss_get_result.R")
set_token("bf3c65fd3952ea434f4a96b641744475")
sport <- 'baseball'
league <- 'mlb'
ep <- 'game_logs'
league.team <- paste(league, batter.team, sep = "-")
q_body <- list(player_id = player_id, status='ended', interval_type='regularseason')
gls <- ss_get_result(sport=sport, league=league, ep=ep, query=q_body, walk=TRUE)
ep <- 'players'
q_body <- list(team_id = league.team)
pls <- ss_get_result(sport=sport, league=league, ep=ep, query=q_body, walk=TRUE)
players<-do.call('rbind', lapply(pls, function(x) x$players))
colnames(players)[1] <- 'player_id'
game_logs<-do.call('rbind', lapply(gls, function(x) x$game_logs))
game_logs <- merge(players, game_logs, by='player_id')
batter.stats <-
game_logs %>%
filter(game_played == TRUE | batters_faced > 0) %>%
group_by(name, bats, position_abbreviation) %>%
summarise(PA = (sum(at_bats)+sum(walks)+sum(hit_by_pitch)+sum(sacrifice_flys)+sum(sacrifice_hits)), BB = sum(walks), HBP = sum(hit_by_pitch), singles = sum(singles), doubles = sum(doubles), triples = sum(triples), hr = sum(home_runs), SB = sum(stolen_bases), CS = sum(caught_stealing), AB = sum(at_bats), IBB = sum(intentional_walks_against), SF = sum(sacrifice_flys), SH = sum(sacrifice_hits))
bdata <- data.frame(batter.stats)
season <- table[year, ]
bdata <- merge(bdata, season)
bdata$regress <- ifelse(bdata$PA < 220 & bdata$PA > 0, TRUE, FALSE)
bdata$woba <- ifelse(bdata$PA != 0,round(((with(bdata, (wBB * (BB) + (wHBP * (HBP)) + (w1B * (singles)) + (w2B * (doubles)) + (w3B * (triples)) + (wHR * (hr)))/((AB) + (BB) - (IBB) + (HBP) + (SH) + (SF))))),4), (ifelse(bdata$position_abbreviation =='RP'|bdata$position_abbreviation =='SP', (average.pitcher.woba(splits, guts_table, (as.numeric(year)-1))), ifelse(bdata$position_abbreviation == 'C', (average.catcher.woba(splits, guts_table, (as.numeric(year)-1))),(average.woba(splits, guts_table, (as.numeric(year)-1)))))))
regress.data <- subset(bdata, bdata$regress == TRUE)
bdata <- subset(bdata, bdata$regress != TRUE)
regress.data$z <- as.numeric(regress.data$woba)/as.numeric(regress.data$PA)
pitchers <- new.data(subset(regress.data, regress.data$position_abbreviation == 'SP'|regress.data$position_abbreviation == 'RP'), 1, guts_table, year, splits)
catchers <- new.data(subset(regress.data, regress.data$position_abbreviation == 'C'), 2, guts_table, year, splits)
first.base <- new.data(subset(regress.data, regress.data$position_abbreviation == '1B'), 3, guts_table, year, splits)
second.base <- new.data(subset(regress.data, regress.data$position_abbreviation == '2B'), 4, guts_table, year, splits)
third.base <- new.data(subset(regress.data, regress.data$position_abbreviation == '3B'), 5, guts_table, year, splits)
SS <- new.data(subset(regress.data, regress.data$position_abbreviation == 'SS'), 6, guts_table, year, splits)
LF <- new.data(subset(regress.data, regress.data$position_abbreviation == 'LF'), 7, guts_table, year, splits)
CF <- new.data(subset(regress.data, regress.data$position_abbreviation == 'CF'), 8, guts_table, year, splits)
RF <- new.data(subset(regress.data, regress.data$position_abbreviation == 'RF'), 9, guts_table, year, splits)
DH <- new.data(subset(regress.data, regress.data$position_abbreviation == 'DH'), 10, guts_table, year, splits)
bdata <- rbind(bdata, pitchers, catchers, first.base,second.base,third.base,SS,LF,CF,RF,DH)
dimnames(bdata)[[1]] <- c(bdata$name)
bdata$name <- NULL
return(bdata)
}
get.coeffs <- function(defensive.position, splits, table, year = '2016'){
psplits <- subset(splits, splits$BAT_FLD_CD == defensive.position & splits$YEAR == as.numeric(year) - 1)
psplits$B_1B <- with(psplits, B_H - B_2B - B_3B - B_HR)
table <-table[as.character(as.numeric(year) - 1), ]
psplits$woba <- round(((with(table, (wBB * (psplits$B_BB) + (wHBP * (psplits$B_HP)) + (w1B * (psplits$B_1B)) + (w2B * (psplits$B_2B)) + 	(w3B * (psplits$B_3B)) + (wHR * (psplits$B_HR)))/((psplits$B_AB) + (psplits$B_BB) - (psplits$B_IBB) + (psplits$B_HP) + (psplits$B_SH) + (psplits$B_SF))))),4)
psplits$z <- psplits$woba/psplits$B_PA
coeff <- summary(lm(psplits$woba ~ psplits$z))$coefficients
return(c(coeff[1,1], coeff[2,1]))
}
new.data <- function(position.data, defensive.position, table = guts_table, year = '2016', splits){
position <- get.coeffs(defensive.position, splits, guts_table, '2016')
position.data$woba <- position[1] + position[2]*as.numeric(position.data$woba)/position.data$PA
position.data$z <- NULL
position.data$retrosheet.id <- NULL
return(position.data)
}
average.woba <- function(splits, table = guts_table, year = '2015'){
osplits <- subset(splits, splits$BAT_FLD_CD != 1 & splits$BAT_FLD_CD != 2)
osplits$B_1B <- with(osplits, B_H - B_2B - B_3B - B_HR)
table <-table[as.character(as.numeric(year) - 1), ]
osplits$woba <- round(((with(table, (wBB * (osplits$B_BB) + (wHBP * (osplits$B_HP)) + (w1B * (osplits$B_1B)) + (w2B * (osplits$B_2B)) + 	(w3B * (osplits$B_3B)) + (wHR * (osplits$B_HR)))/((osplits$B_AB) + (osplits$B_BB) - (osplits$B_IBB) + (osplits$B_HP) + (osplits$B_SH) + (osplits$B_SF))))),4)
osplits[osplits$woba == "Inf",]$woba = 0
return(mean(osplits$woba, na.rm = TRUE))
}
average.pitcher.woba <- function(splits, table = guts_table, year = '2015'){
psplits <- subset(splits, splits$BAT_FLD_CD == 1)
psplits$B_1B <- with(psplits, B_H - B_2B - B_3B - B_HR)
table <- table[2, ]
avg.pitcher.woba <- round(((with(table, (wBB * sum(psplits$B_BB) + (wHBP * sum(psplits$B_HP)) + (w1B * sum(psplits$B_1B)) + (w2B * sum(psplits$B_2B)) + 	(w3B * sum(psplits$B_3B)) + (wHR * sum(psplits$B_HR)))/(sum(psplits$B_AB) + sum(psplits$B_BB) - sum(psplits$B_IBB) + sum(psplits$B_HP) + sum(psplits$B_SH) + sum(psplits$B_SF))))),4)
return(avg.pitcher.woba)
}
average.catcher.woba <- function(splits, table = guts_table, year = '2015'){
csplits <- subset(splits, splits$BAT_FLD_CD == 2)
csplits$B_1B <- with(csplits, B_H - B_2B - B_3B - B_HR)
table <- table[2, ]
avg.catcher.woba <- round(((with(table, (wBB * sum(csplits$B_BB) + (wHBP * sum(csplits$B_HP)) + (w1B * sum(csplits$B_1B)) + (w2B * sum(csplits$B_2B)) + 	(w3B * sum(csplits$B_3B)) + (wHR * sum(csplits$B_HR)))/(sum(csplits$B_AB) + sum(csplits$B_BB) - sum(csplits$B_IBB) + sum(csplits$B_HP) + sum(csplits$B_SH) + sum(csplits$B_SF))))),4)
return(avg.catcher.woba)
}
get.retrosheet.id <- function(pitcher.name, pitcher.team, pitcherData){
info <- paste(pitcher.team, pitcher.name)
retrosheet.id <- pitcherData[info, 3]
return(retrosheet.id)
}
get.run.expectancy <- function(home.team, batter.team, batter.name, pitcher.name, pitcher.team, year = '2016', pitcherSplits = pitcherSplits, table = guts_table, team.info = teams){
pfyear <- as.numeric(year) - 1
BPF <- park.factors(home.team, pfyear, team.info, game.logs)
home.team <- as.character(team.info[home.team, 1])
batter.team <- team.info[batter.team, 2]
pitcher.team <- team.info[pitcher.team, 5]
#pitching stats -- splits
pitcher.retrosheet.id <- as.character(get.retrosheet.id(pitcher.name, pitcher.team, pitcherData))
p.splits <- pitcherSplits[, pitcher.retrosheet.id]
p.splits.R <- p.splits[1]
p.splits.L <- p.splits[2]
avg <- p.splits[3]
#team batting stats
name <-  gsub("\\."," ", batter.name)
name <- gsub("  ", " ", name)
player_id = tolower(paste('mlb', as.character(gsub(" ", "-", name)), sep ="-"))
roster <- roster.wOBA(batter.team, player_id, splits, table, '2016')
league.wOBA <- table[year,1]
current.scale <- table[year,2]
if (nrow(roster) == 0){
avg.woba <- average.woba(splits, table = guts_table, year = '2015')
opp.woba <- ifelse(roster$bats == 'bats_right', p.splits.R, (ifelse(roster$bats =='bats_left', p.splits.L, avg)))
RV.Per.PA <- round(((as.numeric(avg.woba) - as.numeric(league.wOBA))/current.scale) * BPF,4)
return(RV.Per.PA)
}else{
roster$avg.woba <- with(roster,(woba) - (woba * (woba - opp.wOBA)))
roster$opp.wOBA <- ifelse(roster$bats == 'bats_right', p.splits.R, (ifelse(roster$bats =='bats_left', p.splits.L, avg)))
roster$RV.Per.PA <- round(with(roster,(as.numeric(avg.woba) - as.numeric(lg_woba))/woba_scale) * BPF,4)
roster <- roster[-c(4:29)]
return(roster)
}
}
main.function <- function(state, count, batter, stats, env = Run.Env, condition = count.state){
avg.run.env <- (sum(env[,2])/(nrow(env)))
yr.run.env <- env[as.character(year),2]
dif <- ((yr.run.env-avg.run.env)/avg.run.env)
cs <- condition[state,count]
RE.with.Run.Env <- ((cs)*(dif) + (cs))
if(typeof(stats) == "double"){
RE <- round(stats + RE.with.Run.Env, 2)
}else{
RE <- round(as.numeric(stats[, 7]) + RE.with.Run.Env, 2)
}
return(RE)
}
fun1 <- function(home.team,batter.team,pitcher.team,pitcher.name,state,count,batter.name){
if(batter.team == pitcher.team){
return('Not a Valid Matchup')
}else{
stats <- get.run.expectancy(home.team,batter.team,batter.name, pitcher.name,pitcher.team)
RE <- main.function(state,count,batter.name, stats)
return(RE)
}
}
fun1('Angels','Blue Jays','Angels','Adam Wilk','000 0','c00','J.A. Happ')
home.team <- 'Angels'
batter.team <- 'Blue Jays'
batter.name <- 'J.A. Happ'
pitcher.name <- 'Adam Wilk'
pitcher.team <- "Angels"
pfyear <- as.numeric(year) - 1
BPF <- park.factors(home.team, pfyear, team.info, game.logs)
home.team <- as.character(team.info[home.team, 1])
batter.team <- team.info[batter.team, 2]
pitcher.team <- team.info[pitcher.team, 5]
#pitching stats -- splits
pitcher.retrosheet.id <- as.character(get.retrosheet.id(pitcher.name, pitcher.team, pitcherData))
p.splits <- pitcherSplits[, pitcher.retrosheet.id]
p.splits.R <- p.splits[1]
p.splits.L <- p.splits[2]
avg <- p.splits[3]
name <-  gsub("\\."," ", batter.name)
name <- gsub("  ", " ", name)
player_id = tolower(paste('mlb', as.character(gsub(" ", "-", name)), sep ="-"))
roster <- roster.wOBA(batter.team, player_id, splits, table, '2016')
league.wOBA <- table[year,1]
current.scale <- table[year,2]
roster
if (nrow(roster) == 0){
avg.woba <- average.woba(splits, table = guts_table, year = '2015')
opp.woba <- ifelse(roster$bats == 'bats_right', p.splits.R, (ifelse(roster$bats =='bats_left', p.splits.L, avg)))
RV.Per.PA <- round(((as.numeric(avg.woba) - as.numeric(league.wOBA))/current.scale) * BPF,4)}
RV.Per.PA
if (nrow(roster) == 0){
avg.woba <- average.woba(splits, table = guts_table, year = '2015')
opp.woba <- ifelse(roster$bats == 'bats_right', p.splits.R, (ifelse(roster$bats =='bats_left', p.splits.L, avg)))
RV.Per.PA <- round(((as.numeric(avg.woba) - as.numeric(league.wOBA))/current.scale) * BPF,4)
print(RV.Per.PA)
}else{
roster$avg.woba <- with(roster,(woba) - (woba * (woba - opp.wOBA)))
roster$opp.wOBA <- ifelse(roster$bats == 'bats_right', p.splits.R, (ifelse(roster$bats =='bats_left', p.splits.L, avg)))
roster$RV.Per.PA <- round(with(roster,(as.numeric(avg.woba) - as.numeric(lg_woba))/woba_scale) * BPF,4)
roster <- roster[-c(4:29)]
print(roster)
}
get.run.expectancy <- function(home.team, batter.team, batter.name, pitcher.name, pitcher.team, year = '2016', pitcherSplits = pitcherSplits, table = guts_table, team.info = teams){
pfyear <- as.numeric(year) - 1
BPF <- park.factors(home.team, pfyear, team.info, game.logs)
home.team <- as.character(team.info[home.team, 1])
batter.team <- team.info[batter.team, 2]
pitcher.team <- team.info[pitcher.team, 5]
#pitching stats -- splits
pitcher.retrosheet.id <- as.character(get.retrosheet.id(pitcher.name, pitcher.team, pitcherData))
p.splits <- pitcherSplits[, pitcher.retrosheet.id]
p.splits.R <- p.splits[1]
p.splits.L <- p.splits[2]
avg <- p.splits[3]
#team batting stats
name <-  gsub("\\."," ", batter.name)
name <- gsub("  ", " ", name)
player_id = tolower(paste('mlb', as.character(gsub(" ", "-", name)), sep ="-"))
roster <- roster.wOBA(batter.team, player_id, splits, table, '2016')
league.wOBA <- table[year,1]
current.scale <- table[year,2]
if(nrow(roster) == 0){
avg.woba <- average.woba(splits, table = guts_table, year = '2015')
opp.woba <- ifelse(roster$bats == 'bats_right', p.splits.R, (ifelse(roster$bats =='bats_left', p.splits.L, avg)))
RV.Per.PA <- round(((as.numeric(avg.woba) - as.numeric(league.wOBA))/current.scale) * BPF,4)
return(RV.Per.PA)
}else{
roster$avg.woba <- with(roster,(woba) - (woba * (woba - opp.wOBA)))
roster$opp.wOBA <- ifelse(roster$bats == 'bats_right', p.splits.R, (ifelse(roster$bats =='bats_left', p.splits.L, avg)))
roster$RV.Per.PA <- round(with(roster,(as.numeric(avg.woba) - as.numeric(lg_woba))/woba_scale) * BPF,4)
roster <- roster[-c(4:29)]
return(roster)
}
}
get.run.expectancy('Angels','Blue Jays','J.A. Happ','Adam Wilk','Angels','2016',pitcherSplits, guts_table, teams)
fun1 <- function(home.team,batter.team,pitcher.team,pitcher.name,state,count,batter.name){
if(batter.team == pitcher.team){
return('Not a Valid Matchup')
}else{
stats <- get.run.expectancy(home.team,batter.team,batter.name, pitcher.name,pitcher.team)
RE <- main.function(state,count,batter.name, stats)
return(RE)
}
}
fun1('Angels','Blue Jays','Angels','Adam Wilk','000 0','c00','J.A. Happ')
runApp()
library(dplyr)
library(retrosheet)
library(rvest)
library(stringr)
library(rPython)
setwd("~/Desktop/run-expectancy")
teams <- read.csv("teams2016.csv", header = TRUE)
dimnames(teams)[[1]] <- teams$X
teams$X <- NULL
python.load("ALstandings.py")
python.load("NLstandings.py")
AL.records <- read.csv(python.call("get_AL_standings"), header = TRUE)
NL.records <- read.csv(python.call("get_NL_standings"), header = TRUE)
records <- rbind(AL.records, NL.records)
game.logs <- read.csv("gamelogs.merged.csv", header = FALSE)[,1:12]
headers <- read.csv("fields2.csv")
names(game.logs) <- headers$Header
splits <- read.csv("splits.csv", header = TRUE)
year <- '2016'
pitcherSplits <- read.csv("pitcherData-splits.csv", header = TRUE)
dimnames(pitcherSplits)[[1]] <- pitcherSplits$X
pitcherSplits$X <- NULL
pitcherData <- read.csv("pitcherData2016.csv", header=TRUE)
dimnames(pitcherData)[[1]] <- pitcherData$X
pitcherData$X <- NULL
count.state <- read.csv("1990.2015.RE.States.Count.csv")
dimnames(count.state)[[1]] <- count.state[, 1]
wpstates <- read.csv("WPstates.csv", header = TRUE)
dimnames(wpstates)[[2]] <- c("State","WP")
guts_table <- read.csv("guts_table_2016.csv", header = TRUE)
dimnames(guts_table)[[1]] <- guts_table$X
guts_table$X <- NULL
Run.Env <- read.csv("Run.Environments.csv", header = TRUE)
batters <- read.csv("batters.csv", header = TRUE)
batters <- batters[c(2,3,4)]
get.run.expectancy('Angels','Blue Jays','J.A. Happ','Adam Wilk','Angels','2016',pitcherSplits, guts_table, teams)
fun1('Angels','Blue Jays','Angels','Adam Wilk','000 0','c00','J.A. Happ')
